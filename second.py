import asyncio
import logging
import os


import aiocron
import openai
import pymongo
from aiogram import Bot, Dispatcher, types
from aiogram.types import InputMediaPhoto, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()


MONGO_URI = os.getenv("MONGO_URI")
# Configure logging
logging.basicConfig(level=logging.INFO)
openai.api_key = os.getenv("OPENAI_API_KEY")

client = pymongo.MongoClient(MONGO_URI)
db = client["Feedbacks"]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
feedback_collection = db["feedback"]

db1 = client["telegram_bot_db"]  # –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
users_collection = db1["users"]

API_TOKEN = os.getenv("API_TOKEN")
# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# Define the keyboard layout
main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.row("–ö–∞—Ä—Ç–∞üó∫Ô∏è", "–†–£–ü –®–ò–¢–∏–òüìö")
main_keyboard.row("–ì–¥–µ –Ø?ü´£", "–ù–∞–π—Ç–∏üîç", "ChatGPTü§ñ")
main_keyboard.add("–ñ–∞–ª–æ–±—ã/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüì•")
# Global dictionary to store user states
USER_STATES = {}


def add_user(user_id):
    user = {"_id": user_id}
    try:
        users_collection.insert_one(user)
    except:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        pass


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_all_users():
    return [user["_id"] for user in users_collection.find({}, {"_id": 1})]


def send_main_keyboard(user_id, message="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"):
    return bot.send_message(user_id, message, reply_markup=main_keyboard)


def save_feedback(user_id, text):
    feedback_document = {
        "user_id": user_id,
        "text": text,
    }
    feedback_collection.insert_one(feedback_document)


async def ask_openai(question):
    # Using the gpt-3-turbo model for chat-based interaction
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": question},
        ],
        max_tokens=800,
    )

    return response.choices[0].message["content"].strip()


@aiocron.crontab("0 9 * * *")  # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:02
async def send_daily_quote():
    # –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users = get_all_users()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É —Å –ø–æ–º–æ—â—å—é OpenAI
    prompt = "–°–Ω–∞—á–∞–ª–∞ –ø–æ–∂–µ–ª–∞–π –¥–æ–±—Ä–æ–≥–æ —É—Ç—Ä–æ –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞ GUIDeon. –ü–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç –Ω–∞ 100 —Å–∏–º–≤–æ–ª–æ–≤"
    response = await ask_openai(prompt)

    for user_id in users:
        await bot.send_message(user_id, response)


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    add_user(message.from_user.id)
    first_name = message.from_user.first_name
    welcome_msg = (
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! \n\n"
        f"ü§ñ –≠—Ç–æ –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ü–µ—Ä–≤–∞—à–∞ –≤ —Å—Ç–µ–Ω–∞—Ö –ö–ë–¢–£. "
        f"–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π OSIT.\n\n"
        f"üîç –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"- –£–∑–Ω–∞—Ç—å –≥–¥–µ –≤—ã –∏–ª–∏ –∂–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        f"- –†–∞–±–æ—á–∏–π —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –®–ò–¢–∏–ò\n"
        f"- –Æ–∑–∞—Ç—å ChatGPT –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ!\n"
        f"- –û—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –î–µ–∫–∞–Ω–∞—Ç—É –∏–ª–∏ OSIT\n"
    )

    await bot.send_message(
        message.from_user.id, welcome_msg, reply_markup=main_keyboard
    )


@dp.message_handler(lambda message: message.text == "–ö–∞—Ä—Ç–∞üó∫Ô∏è")
async def handle_button1(message: types.Message):
    maps_paths = [
        "./map/1-floor_kbtu.jpg",
        "./map/2-floor_kbtu.jpg",
        "./map/3-floor_kbtu.jpg",
        "./map/4-floor_kbtu.jpg",
        "./map/5-floor_kbtu.jpg",
    ]
    media = [InputMediaPhoto(open(map_path, "rb")) for map_path in maps_paths]

    await bot.send_media_group(message.from_user.id, media)

    # Close the files after sending
    for item in media:
        item.media.close()


@dp.message_handler(lambda message: message.text == "–ñ–∞–ª–æ–±—ã/–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüì•")
async def handle_feedback(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∂–µ —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ –Ω–µ —Ç–æ–ª—å–∫–æ OSIT –∞ —Ç–∞–∫ –∂–µ –î–µ–∫–∞–Ω–∞—Ç—É –®–ò–¢–∏–ò. –í—Å–µ –ø–∏—Å—å–º–∞ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∏ —á–∏—Ç–∞—Ç—å—Å—è. –£–¥–∞—á–∏!",
    )
    USER_STATES[message.from_user.id] = "feedback"


@dp.message_handler(lambda message: USER_STATES.get(message.from_user.id) == "feedback")
async def feedback(message: types.Message):
    save_feedback(message.from_user.id, message.text)
    await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    USER_STATES[message.from_user.id] = None


@dp.message_handler(lambda message: message.text == "–†–£–ü –®–ò–¢–∏–òüìö")
async def handle_button1(message: types.Message):
    # Define a new keyboard layout for the RUP options
    rup_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    rup_keyboard.row("–í–¢–ò–ü–û", "–ò–°")
    rup_keyboard.row("–ê–ò–£", "–†–ò–ú", "IT management")
    rup_keyboard.add("–ù–∞–∑–∞–¥")

    # Send a message to the user with the new keyboard layout
    await bot.send_message(
        message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –†–£–ü:", reply_markup=rup_keyboard
    )


# Handlers for RUP options
@dp.message_handler(
    lambda message: message.text in ["–í–¢–ò–ü–û", "–ò–°", "–ê–ò–£", "–†–ò–ú", "IT management"]
)
async def handle_rup_options(message: types.Message):
    # Handle the specific RUP option
    # For example:
    if message.text == "–í–¢–ò–ü–û":
        path = "./rup_fit/VTIPO.pdf"
    elif message.text == "–ò–°":
        path = "./rup_fit/IS.pdf"
    elif message.text == "–†–ò–ú":
        path = "./rup_fit/RIM.pdf"
    elif message.text == "–ê–ò–£":
        path = "./rup_fit/AU.pdf"
    elif message.text == "IT management":
        path = "./rup_fit/it_man.pdf"
    with open(path, "rb") as file:
        await bot.send_document(message.from_user.id, file)

    # Return to the main keyboard after handling the RUP option
    await send_main_keyboard(message.from_user.id)


@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def handle_back_button(message: types.Message):
    # Return to the main keyboard
    await send_main_keyboard(message.from_user.id)



chatgpt_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
chatgpt_keyboard.row("–ù–∞–∑–∞–¥")


@dp.message_handler(lambda message: message.text == "ChatGPTü§ñ")
async def handle_chatgpt(message: types.Message):
    await bot.send_message(
        message.from_user.id, "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=chatgpt_keyboard
    )
    USER_STATES[message.from_user.id] = "waiting_for_openai_question"


@dp.message_handler(
    lambda message: USER_STATES.get(message.from_user.id)
    == "waiting_for_openai_question"
)
async def handle_openai_question(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ü—Ä–æ—à—É –æ–∂–∏–¥–∞–π—Ç–µ —ç—Ç–æ –∑–∞–π–º–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è",
    )
    response = await ask_openai(message.text)
    await bot.send_message(message.from_user.id, response)


@dp.message_handler(
    lambda message: message.text == "–ù–∞–∑–∞–¥"
    and USER_STATES.get(message.from_user.id) == "waiting_for_openai_question"
)
async def handle_back_from_chatgpt(message: types.Message):
    await bot.send_message(
        message.from_user.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.",
        reply_markup=main_keyboard,  # 'keyboard' —ç—Ç–æ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )
    USER_STATES[message.from_user.id] = None


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
